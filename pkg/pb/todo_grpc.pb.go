// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TODOServiceClient is the client API for TODOService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TODOServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	SetTimeOut(ctx context.Context, in *SetTimeOutRequest, opts ...grpc.CallOption) (*SetTimeResponse, error)
}

type tODOServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTODOServiceClient(cc grpc.ClientConnInterface) TODOServiceClient {
	return &tODOServiceClient{cc}
}

func (c *tODOServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/TODOService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tODOServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/TODOService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tODOServiceClient) SetTimeOut(ctx context.Context, in *SetTimeOutRequest, opts ...grpc.CallOption) (*SetTimeResponse, error) {
	out := new(SetTimeResponse)
	err := c.cc.Invoke(ctx, "/TODOService/SetTimeOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TODOServiceServer is the server API for TODOService service.
// All implementations must embed UnimplementedTODOServiceServer
// for forward compatibility
type TODOServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	SetTimeOut(context.Context, *SetTimeOutRequest) (*SetTimeResponse, error)
	mustEmbedUnimplementedTODOServiceServer()
}

// UnimplementedTODOServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTODOServiceServer struct {
}

func (UnimplementedTODOServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTODOServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTODOServiceServer) SetTimeOut(context.Context, *SetTimeOutRequest) (*SetTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTimeOut not implemented")
}
func (UnimplementedTODOServiceServer) mustEmbedUnimplementedTODOServiceServer() {}

// UnsafeTODOServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TODOServiceServer will
// result in compilation errors.
type UnsafeTODOServiceServer interface {
	mustEmbedUnimplementedTODOServiceServer()
}

func RegisterTODOServiceServer(s grpc.ServiceRegistrar, srv TODOServiceServer) {
	s.RegisterService(&TODOService_ServiceDesc, srv)
}

func _TODOService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TODOServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TODOService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TODOServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TODOService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TODOServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TODOService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TODOServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TODOService_SetTimeOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTimeOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TODOServiceServer).SetTimeOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TODOService/SetTimeOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TODOServiceServer).SetTimeOut(ctx, req.(*SetTimeOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TODOService_ServiceDesc is the grpc.ServiceDesc for TODOService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TODOService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TODOService",
	HandlerType: (*TODOServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TODOService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TODOService_Get_Handler,
		},
		{
			MethodName: "SetTimeOut",
			Handler:    _TODOService_SetTimeOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/todo.proto",
}
